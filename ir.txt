const int size = '20'
const char sort = 'Q'
const char plus = '+'
const char times = '*'
const char lucky = '9'
var array of int a
var int n
var int num_cmp

int fact()
para int n
n == 0
BZ L1
ret 1
goto L2
L1:
#t3 = n - 1
push #t3
call fact
#t2 = RET
#t1 = n * #t2
ret #t1
L2:

char atbash()
para char c
const char a = 'a'
c >= a
BZ L4
c <= 122
BZ L4
#t5 = 97 + 122
#t4 = #t5 - c
ret #t4
L4:
c >= 65
BZ L6
c <= 90
BZ L6
#t7 = 65 + 90
#t6 = #t7 - c
ret #t6
L6:
ret 43

void get_value_n()
var int useless001
useless001 = 0
L7:
push "useless001="
push useless001
call printf
push "Input a non-negative integer: "
call printf
push n
call scanf
#t8 = useless001 + 10
useless001 = #t8
n < 0
BNZ L7
ret 

void swap_array_elements()
para int i
para int j
var int _tmp
#t9 = a[i]
_tmp = #t9
#t10 = a[j]
a[i] = #t10
a[j] = _tmp
ret 

void nop()
ret 

void array_comparison()
const int max = '98'
var array of int s1
var array of int s2
var int i
i = 0
L8:
#t13 = -5 * i
#t12 = i + #t13
#t11 = #t12 - 12345
s1[i] = #t11
#t17 = - 5
#t16 = #t17 * i
#t15 = i + #t16
#t14 = #t15 - 12345
s2[i] = #t14
#t18 = i + 1
i = #t18
i < max
BNZ L8
#t19 = + 0
#t20 = max - 1
s1[#t20] = #t19
#t21 = - 0
#t22 = max - 1
s2[#t22] = #t21
#t24 = max - 2
#t25 = s2[#t24]
#t26 = max - 2
#t27 = s2[#t26]
#t23 = #t25 * #t27
#t28 = max - 2
s1[#t28] = #t23
i = 0
L9:
#t29 = s1[i]
#t29
BZ L10
#t30 = s1[i]
#t31 = s2[i]
#t30 != #t31
BZ L11
push "s1 is different from s2."
call printf
L11:
#t32 = i + 1
i = #t32
goto L9
L10:
ret 

void quick()
para int left
para int right
var int i
var int last
var int tmp
left >= right
BZ L12
ret 
L12:
last = left
#t33 = left + 1
i = #t33
L13:
i <= right
BZ L14
#t34 = num_cmp + 1
num_cmp = #t34
#t35 = a[i]
#t36 = a[left]
#t35 < #t36
BZ L15
#t38 = + last
#t37 = #t38 + 1
last = #t37
push last
push i
call swap_array_elements
L15:
#t39 = i + 1
i = #t39
goto L13
L14:
push last
push left
call swap_array_elements
#t40 = last - 1
push left
push #t40
call quick
#t41 = last + 1
push #t41
push right
call quick
ret 

void main()
var int i
var int t
var char order
var char c
push "This is a simple sorting program using quick sort algorithm!"
call printf
push "Input the size of the array and order you prefer('a' for ascending order, 'd' for descending order): "
call printf
push n
push order
call scanf
push "Input the array: "
call printf
i = 0
L16:
i < n
BZ L17
push t
call scanf
a[i] = t
#t42 = i + 1
i = #t42
goto L16
L17:
#t43 = n - 1
push 0
push #t43
call quick
call nop
#t45 = num_cmp / 2
#t44 = - #t45
push "-num_cmp/2 = "
push #t44
call printf
push "The sorted array:"
call printf
order == 97
BZ L18
i = 0
L20:
i < n
BZ L21
#t46 = a[i]
push " "
push #t46
call printf
#t47 = i + 1
i = #t47
goto L20
L21:
goto L23
L18:
#t48 = n - 1
i = #t48
L22:
#t49 = - 1
i > #t49
BZ L23
#t50 = a[i]
push " "
push #t50
call printf
#t51 = i + -1
i = #t51
goto L22
L23:
push "Bonus!"
call printf
call get_value_n
push n
call fact
#t52 = RET
push #t52
call printf
push ""
call printf
push "Input a letter: "
call printf
push c
call scanf
push c
call atbash
#t53 = RET
c = #t53
push c
call printf
ret 
